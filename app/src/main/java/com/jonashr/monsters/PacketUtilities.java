package com.jonashr.monsters;

/**
 * Created by Jonas on 13-11-2015.
 */
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.nio.ByteBuffer;

public final class PacketUtilities {

    private PacketUtilities()
    {
    }

    /**
     * Constructs a packet from a byte array and a packet ID.
     * @param data The byte data to put inside the packet
     * @param packetID The packet header identifier
     * @return Returns a ByteBuffer containing the packet header identifier and the data
     */
    public static ByteBuffer constructPacket(byte[] data, int packetID)
    {
        ByteBuffer packetHeader = ByteBuffer.allocate(4);
        packetHeader.putInt(packetID);

        byte[] header = packetHeader.array();

        byte[] packetToSend = new byte[header.length + data.length];

        System.arraycopy(header, 0, packetToSend, 0, header.length);
        System.arraycopy(data, 0, packetToSend, header.length, data.length);

        return ByteBuffer.wrap(packetToSend);
    }

    /**
     * Converts an object to bytes<br />
     * Objects passed must be serializable
     * @param o Object to convert to bytes
     * @return Returns a byte array representing the object
     */
    public static byte[] objectToBytes(Object o)
    {
        ByteArrayOutputStream b = new ByteArrayOutputStream();

        try {
            ObjectOutputStream oStream = new ObjectOutputStream(b);

            oStream.writeObject(o);

            return b.toByteArray();

        } catch (IOException e) {
            e.printStackTrace();
        }

        return null;
    }

    /**
     * Takes a ByteBuffer packet as argument and converts it to an Object.<br />
     * Packets must have been generated by the constructPacket()-method
     * @param packet The ByteBuffer packet to convert into an object
     * @return Returns the object from the packet
     */
    public static Object packetToObject(byte[] packet)
    {
        ByteArrayInputStream b = new ByteArrayInputStream(packet);

        try {
            ObjectInputStream iStream = new ObjectInputStream(b);

            return iStream.readObject();

        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
        }

        return null;
    }
}
